{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krist\\\\Desktop\\\\Cristian\\\\Visual Studio Code\\\\RickandMorty API\\\\rick-and-morty-api\\\\src\\\\components\\\\SearchBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../stylesheets/SearchBar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchBar({\n  characters,\n  setFilteredCharacters,\n  setPaginatedCharacters,\n  setCurrentPage\n}) {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Filtrar personajes según la búsqueda\n  useEffect(() => {\n    const filtered = characters.filter(character => character.name.toLowerCase().includes(searchTerm.toLowerCase()));\n    setFilteredCharacters(filtered);\n    setCurrentPage(1); // Reiniciar a la primera página cuando se realiza una búsqueda\n  }, [searchTerm, characters]);\n\n  // Paginación: actualizar `paginatedCharacters` cuando cambian `filteredCharacters` o `currentPage`\n  useEffect(() => {\n    const startIndex = 0;\n    const endIndex = 20;\n    setPaginatedCharacters(characters.slice(startIndex, endIndex));\n  }, [characters]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-bar-container\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Buscar personaje...\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      className: \"search-bar\",\n      autoCorrect: \"off\",\n      spellCheck: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchBar, \"PzkbXKWXFP0arZAtCCRr3vgEnL0=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SearchBar","characters","setFilteredCharacters","setPaginatedCharacters","setCurrentPage","_s","searchTerm","setSearchTerm","filtered","filter","character","name","toLowerCase","includes","startIndex","endIndex","slice","className","children","type","placeholder","value","onChange","e","target","autoCorrect","spellCheck","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/krist/Desktop/Cristian/Visual Studio Code/RickandMorty API/rick-and-morty-api/src/components/SearchBar.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../stylesheets/SearchBar.css\";\r\n\r\nfunction SearchBar({ characters, setFilteredCharacters, setPaginatedCharacters, setCurrentPage }) {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  // Filtrar personajes según la búsqueda\r\n  useEffect(() => {\r\n    const filtered = characters.filter((character) =>\r\n      character.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    setFilteredCharacters(filtered);\r\n    setCurrentPage(1); // Reiniciar a la primera página cuando se realiza una búsqueda\r\n  }, [searchTerm, characters]);\r\n\r\n  // Paginación: actualizar `paginatedCharacters` cuando cambian `filteredCharacters` o `currentPage`\r\n  useEffect(() => {\r\n    const startIndex = 0;\r\n    const endIndex = 20;\r\n    setPaginatedCharacters(characters.slice(startIndex, endIndex));\r\n  }, [characters]);\r\n\r\n  return (\r\n    <div className=\"search-bar-container\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Buscar personaje...\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n        className=\"search-bar\"\r\n        autoCorrect=\"off\"\r\n        spellCheck={false}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,SAASA,CAAC;EAAEC,UAAU;EAAEC,qBAAqB;EAAEC,sBAAsB;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EAChG,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAGP,UAAU,CAACQ,MAAM,CAAEC,SAAS,IAC3CA,SAAS,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,UAAU,CAACM,WAAW,CAAC,CAAC,CAChE,CAAC;IAEDV,qBAAqB,CAACM,QAAQ,CAAC;IAC/BJ,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,CAACE,UAAU,EAAEL,UAAU,CAAC,CAAC;;EAE5B;EACAJ,SAAS,CAAC,MAAM;IACd,MAAMiB,UAAU,GAAG,CAAC;IACpB,MAAMC,QAAQ,GAAG,EAAE;IACnBZ,sBAAsB,CAACF,UAAU,CAACe,KAAK,CAACF,UAAU,EAAEC,QAAQ,CAAC,CAAC;EAChE,CAAC,EAAE,CAACd,UAAU,CAAC,CAAC;EAEhB,oBACEF,OAAA;IAAKkB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,eACnCnB,OAAA;MACEoB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,qBAAqB;MACjCC,KAAK,EAAEf,UAAW;MAClBgB,QAAQ,EAAGC,CAAC,IAAKhB,aAAa,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC/CJ,SAAS,EAAC,YAAY;MACtBQ,WAAW,EAAC,KAAK;MACjBC,UAAU,EAAE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACzB,EAAA,CAjCQL,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AAmClB,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}